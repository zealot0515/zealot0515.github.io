<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>常用工具 on Pagi&#39;s Blog</title>
    <link>https://zealot0515.github.io/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 常用工具 on Pagi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 May 2019 07:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zealot0515.github.io/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>讓cpu假忙的小工具 stress</title>
      <link>https://zealot0515.github.io/posts/%E8%AE%93cpu%E5%81%87%E5%BF%99%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7-stress/</link>
      <pubDate>Fri, 10 May 2019 07:00:00 +0000</pubDate>
      
      <guid>https://zealot0515.github.io/posts/%E8%AE%93cpu%E5%81%87%E5%BF%99%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7-stress/</guid>
      <description>有時候我們要測試程式在系統忙碌/資源不足的狀態下會不會有異常,
或者監控系統是否能夠順利監控到異常狀況,
要怎麼讓系統進入忙碌狀態, 就會是一個難搞的問題,
這邊有一個小工具, 叫做 stress, 透過運算能夠簡單的給系統壓力,
不過工具本身會直接把cpu吃好吃滿, 所以可以搭配cpulimit套件,
來避免cpu被完全吃光。
 安裝
因為兩個都是ubuntu內建的套件,
直接 sudo apt-get install stress cpulimit 就可以安裝好收工 使用
stress &amp;ndash;cpu 1 上面是產生一個worker來壓測cpu 有記憶體需求可以使用 &amp;ndash;vm(-m) 來產生特定的worker 或者可以參考下面的manpage說明
  Name stress - tool to impose load on and stress test systems Synopsis stress [OPTION [ARG]] ... Description &#39;stress&#39; imposes certain types of compute stress on your system -?, --help show this help statement --version show version statement -v, --verbose be verbose -q, --quiet be quiet -n, --dry-run show what would have been done -t, --timeout N timeout after N seconds --backoff N wait factor of N microseconds before work starts -c, --cpu N spawn N workers spinning on sqrt() -i, --io N spawn N workers spinning on sync() -m, --vm N spawn N workers spinning on malloc()/free() --vm-bytes B malloc B bytes per vm worker (default is 256MB) --vm-stride B touch a byte every B bytes (default is 4096) --vm-hang N sleep N secs before free (default none, 0 is inf) --vm-keep redirty memory instead of freeing and reallocating -d, --hdd N spawn N workers spinning on write()/unlink() --hdd-bytes B write B bytes per hdd worker (default is 1GB) Example: stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s Note: Numbers may be suffixed with s,m,h,d,y (time) or B,K,M,G (size).</description>
    </item>
    
    <item>
      <title>Terraform IaC Tool </title>
      <link>https://zealot0515.github.io/posts/terraform-iac-tool/</link>
      <pubDate>Thu, 09 May 2019 13:00:00 +0000</pubDate>
      
      <guid>https://zealot0515.github.io/posts/terraform-iac-tool/</guid>
      <description>Terraform是Hashicorp 公司出品的一個IaC工具,
可以透過程式碼的方式來佈建 Aws的服務,
同時可以在版本更新時候進行最小資源改動,
配合版控更能在意外發生時後, 快速重建服務。
Terraform類似於Aws Cloud Formation, 但不僅僅支援Aws,
更支援其他的雲服務(GCP, Azure &amp;hellip;),
相較學習Cloud Formation僅能用於Aws, 學習Terraform是個更好的選擇。
這邊介紹一下Terraform的安裝, 參照官方的文件, 幾乎所有系統都能使用,
在這文章中我是透過Ubuntu安裝。
# 1. 先更新ubuntu套件庫 sudo apt-get update # 2. 安裝unzip sudo apt-get install unzip # 3. 取得terraform 安裝包 wget https://releases.hashicorp.com/terraform/0.11.13/terraform_0.11.13_linux_amd64.zip # 4. 解開安裝包 unzip terraform_0.11.13_linux_amd64.zip # 5. 將執行檔放到 /usr/local/bin 底下方便後續使用 sudo mv terraform /usr/local/bin/  之後再補充一些IaC 的 寫法</description>
    </item>
    
    <item>
      <title>Terraforming, 用terraform的方式列出aws資源</title>
      <link>https://zealot0515.github.io/posts/terraforming-%E7%94%A8terraform%E7%9A%84%E6%96%B9%E5%BC%8F%E5%88%97%E5%87%BAaws%E8%B3%87%E6%BA%90/</link>
      <pubDate>Wed, 08 May 2019 15:00:00 +0000</pubDate>
      
      <guid>https://zealot0515.github.io/posts/terraforming-%E7%94%A8terraform%E7%9A%84%E6%96%B9%E5%BC%8F%E5%88%97%E5%87%BAaws%E8%B3%87%E6%BA%90/</guid>
      <description>先前在學怎麼寫terraform的時候, 曾經想過如果是既有的服務,
該怎麼透過terraform來做管理, 雖然可以用資源的方式引入,
但量多起來後也是一種困擾。
今天在同事的介紹下知道了Terraforming這個工具,
可以幫我們用terraform的格式列出使用的服務, 簡直方便極了,
還可以透過參數印出tfstate, 取得詳細的參數數據, 方便開發。
github: https://github.com/dtan4/terraforming
terraforming s3  透過上面的指令就能列出aws帳戶下使用的s3服務tf 格式的寫法
resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;hoge&amp;quot; { bucket = &amp;quot;hoge&amp;quot; acl = &amp;quot;private&amp;quot; } resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;fuga&amp;quot; { bucket = &amp;quot;fuga&amp;quot; acl = &amp;quot;private&amp;quot; }  加入 &amp;ndash;tfstate後則可列出詳細參數
terraforming s3 --tfstate { &amp;quot;version&amp;quot;: 1, &amp;quot;serial&amp;quot;: 1, &amp;quot;modules&amp;quot;: { &amp;quot;path&amp;quot;: [ &amp;quot;root&amp;quot; ], &amp;quot;outputs&amp;quot;: { }, &amp;quot;resources&amp;quot;: { &amp;quot;aws_s3_bucket.hoge&amp;quot;: { &amp;quot;type&amp;quot;: &amp;quot;aws_s3_bucket&amp;quot;, &amp;quot;primary&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;hoge&amp;quot;, &amp;quot;attributes&amp;quot;: { &amp;quot;acl&amp;quot;: &amp;quot;private&amp;quot;, &amp;quot;bucket&amp;quot;: &amp;quot;hoge&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;hoge&amp;quot; } } }, &amp;quot;aws_s3_bucket.</description>
    </item>
    
  </channel>
</rss>